import { Receipt } from '../models/Receipt';
import { v4 as uuid } from 'uuid';
import logger from '../logger';

// In-memory data store
const receipts: { [key: string]: Receipt } = {};

const formatTimeTo12Hour = (hours: number, minutes: number): string => {
  const ampm = hours >= 12 ? 'PM' : 'AM';
  const hours12 = hours % 12 || 12;
  const minutesFormatted = minutes < 10 ? `0${minutes}` : minutes;
  return `${hours12}:${minutesFormatted} ${ampm}`;
};

// Function to process the receipt and store it in memory
export const processReceiptService = (receipt: Receipt): string => {
  const receiptId = uuid();
  receipts[receiptId] = receipt;
  return receiptId;
};

// Function to get points based on the rules
export const getPointsService = (id: string): number | undefined => {
  const receipt = receipts[id];
  if (!receipt) return undefined;

  let points = 0;

  // Rule 1: One point for every alphanumeric character in the retailer name
  points += receipt.retailer.replace(/[^a-zA-Z0-9]/g, '').length;
  logger.info(`${points} - retailer name (${receipt.retailer}) has ${points} alphanumeric characters, total => ${points}`);

  // Rule 2. 50 points if the total is a round dollar amount with no cents.
  if (parseFloat(receipt.total) % 1 === 0) {
    points += 50;
    logger.info(`50 Points - total is a round dollar amount, total => ${points}`)
  }

  // Rule 3: 25 points if the total is a multiple of 0.25
  if (parseFloat(receipt.total) % 0.25 === 0) {
    points += 25;
    logger.info(`25 Points - total is a multiple of 0.25, total => ${points}`);
  }

  // Rule 4: 5 points for every two items on the receipt
  const twoItemsPoints = Math.floor(receipt.items.length / 2) * 5;
  points += twoItemsPoints;
  logger.info(`${twoItemsPoints} - ${receipt.items.length} items (2 pairs @ 5 points each), total => ${points}`);

  // Rule 5: Item description logic (trimmed length multiple of 3)
  receipt.items.forEach(item => {
    const trimmedDescription = item.shortDescription.trim();
    if (trimmedDescription.length % 3 === 0) {
      const itemPrice = Math.ceil(parseFloat(item.price) * 0.2);
      points += itemPrice;
      logger.info(`${itemPrice} Points - ${trimmedDescription}, total => ${points}`);
    }
  });

  // Rule 6: 5 points if the total is greater than 10.00 (only if generated by LLM)
  // Since our current system does not involve LLMs, this rule applies unconditionally if the total is greater than 10.00.
  if (parseFloat(receipt.total) > 10.00) {
    points += 5;
    logger.info(`5 Points - Total is greater than 10.00 generated by LLM , total => ${points}`)
  }

  // Rule 7: 6 points if the day in the purchase date is odd
  const purchaseDay = new Date(receipt.purchaseDate).getDate();

  if (purchaseDay % 2 !== 0) {
    points += 6;
    logger.info(`6 Points - purchase day is odd, total => ${points}`);
  }

  // Rule 8: 10 points if the time of purchase is between 2:00pm and 4:00pm
  const purchaseTime = parseInt(receipt.purchaseTime.split(':')[0], 10);
  const purchaseMinutes = parseInt(receipt.purchaseTime.split(':')[1], 10);
  if (purchaseTime >= 14 && purchaseTime < 16) {
    points += 10;
    const formattedTime = formatTimeTo12Hour(purchaseTime, purchaseMinutes);
    logger.info(`10 Points - ${formattedTime} is between 2:00pm and 4:00pm, total => ${points}`);
  }

  logger.info(`Total => ${points} points`);
  return points;
};
